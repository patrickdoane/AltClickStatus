name: release-on-tag

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Existing tag to (re)package, e.g. v0.3.0i'
        required: true
        default: 'v0.3.0i'

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.meta.outputs.tag }}   # Expose the tag to the debug job
    steps:
      - name: 'Derive tag & version'
        id: meta
        shell: bash
        run: |
          if [[ -n "${{ github.event.inputs.tag }}" ]]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG="${GITHUB_REF_NAME}"
          fi
          if [[ -z "$TAG" ]]; then
            echo "::error::No tag provided or detected."
            exit 1
          fi
          VERSION="${TAG#v}"
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "TAG=${TAG}" >> "$GITHUB_ENV"
          echo "VERSION=${VERSION}" >> "$GITHUB_ENV"

      - name: 'Checkout tag'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ steps.meta.outputs.tag }}

      - name: 'Verify tag exists'
        shell: bash
        run: |
          if ! git show-ref --tags --verify --quiet "refs/tags/${{ steps.meta.outputs.tag }}"; then
            echo "::error::Tag '${{ steps.meta.outputs.tag }}' does not exist."
            exit 1
          fi

      - name: 'Preflight: show repo tree (first 200 paths)'
        run: |
          git ls-tree -r --name-only HEAD | sed -n '1,200p' || true

      - name: 'Preflight: locate TOC at tag'
        id: toc
        shell: bash
        run: |
          set -euo pipefail
          if [[ -f "AltClickStatus/AltClickStatus.toc" ]]; then
            echo "Found TOC at AltClickStatus/AltClickStatus.toc"
            echo "found=AltClickStatus/AltClickStatus.toc" >> "$GITHUB_OUTPUT"
          else
            echo "::error::Expected AltClickStatus/AltClickStatus.toc at the tag, but it was not found."
            echo "Tip: ensure the top-level addon folder exists at the tag and contains the TOC."
            exit 1
          fi
          if ! grep -q '@project-version@' "AltClickStatus/AltClickStatus.toc"; then
            echo "::warning::TOC does not contain '@project-version@'. Packager will not bump Version from the tag."
          fi

      # ---------- GitHub ZIP ----------
      - name: 'Prepare ZIP package for GitHub Release'
        shell: bash
        run: |
          set -euo pipefail
          SRC_DIR="AltClickStatus"
          ADDON="AltClickStatus"
          mkdir -p "pkg/${ADDON}"
          rsync -a --delete --exclude ".git" --exclude ".github" --exclude "pkg" "${SRC_DIR}/" "pkg/${ADDON}/"
          # bump Version inside the packaged copy for GitHub Release zip
          if grep -qE '^##\s*Version:' "pkg/${ADDON}/${ADDON}.toc"; then
            sed -i -E "s/^(##\s*Version:)\s*.*/\1 ${{ steps.meta.outputs.version }}/" "pkg/${ADDON}/${ADDON}.toc"
          else
            echo "## Version: ${{ steps.meta.outputs.version }}" >> "pkg/${ADDON}/${ADDON}.toc"
          fi
          cd pkg
          ZIP="${ADDON}_${{ steps.meta.outputs.tag }}.zip"
          zip -r "$ZIP" "${ADDON}"
          echo "ZIP_PATH=${PWD}/${ZIP}" >> $GITHUB_ENV

      - name: 'Upload artifact (GitHub zip)'
        uses: actions/upload-artifact@v4
        with:
          name: AltClickStatus_${{ steps.meta.outputs.tag }}.zip
          path: ${{ env.ZIP_PATH }}

      # ---------- Use changelog section for GitHub Release ----------
      - name: 'Extract changelog section for this tag'
        id: relnotes
        shell: bash
        run: |
          set -euo pipefail
          TAG="${{ steps.meta.outputs.tag }}"   # e.g., v0.3.0j
          T="${TAG#v}"
          awk -v ver="\[v"T"\]" '
            BEGIN{found=0}
            /^##[ \t]*\[v[0-9]+\.[0-9]+\.[0-9]+\]/{ if(found) exit; if($0 ~ ver){found=1} }
            found{print}
          ' CHANGELOG.md > RELEASE_NOTES.md
          # Trim leading/trailing blank lines
          awk 'NF{p=1} p{print}' RELEASE_NOTES.md | awk '{print} END{print ""}' > RELEASE_NOTES.md.tmp && mv RELEASE_NOTES.md.tmp RELEASE_NOTES.md
          if [ -s RELEASE_NOTES.md ]; then
            echo "has_notes=true" >> "$GITHUB_OUTPUT"
          else
            echo "::warning::No changelog section found for ${TAG}; using generated notes."
            echo "has_notes=false" >> "$GITHUB_OUTPUT"
          fi

      - name: 'Create or update GitHub Release (from CHANGELOG)'
        if: steps.relnotes.outputs.has_notes == 'true'
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.ZIP_PATH }}
          name: Alt-Click Status ${{ steps.meta.outputs.tag }}
          tag_name: ${{ steps.meta.outputs.tag }}
          body_path: RELEASE_NOTES.md
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Create or update GitHub Release (auto notes)'
        if: steps.relnotes.outputs.has_notes != 'true'
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.ZIP_PATH }}
          name: Alt-Click Status ${{ steps.meta.outputs.tag }}
          tag_name: ${{ steps.meta.outputs.tag }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ---------- Resolve game version (from TOC ## Interface:) ----------
      - name: 'Resolve game version from TOC'
        id: inf
        shell: bash
        run: |
          set -euo pipefail
          TOC="AltClickStatus/AltClickStatus.toc"
          IFACE_LINE="$(grep -E '^[[:space:]]*##[[:space:]]*Interface:[[:space:]]*[0-9]+' "$TOC" || true)"
          IFACE="$(echo "$IFACE_LINE" | awk '{print $NF}')"
          if [[ -z "${IFACE:-}" ]]; then
            echo "::warning::No Interface line found; defaulting to 1.15.7"
            GV="1.15.7"
          else
            digits="$IFACE"
            len=${#digits}
            if [[ $len -ge 5 ]]; then
              if [[ $len -eq 5 ]]; then
                maj="${digits:0:1}"
                min=$((10#${digits:1:2}))
                pat=$((10#${digits:3:2}))
              else
                maj=$((10#${digits:0:2}))
                min=$((10#${digits:2:2}))
                pat=$((10#${digits:4:2}))
              fi
              GV="${maj}.${min}.${pat}"
            else
              GV="1.15.7"
            fi
          fi
          echo "Resolved game version: $GV"
          echo "gamever=${GV}" >> "$GITHUB_OUTPUT"

      # ---------- CurseForge primary: BigWigs Packager ----------
      - name: 'Write clean .pkgmeta for packager'
        shell: bash
        run: |
          set -euo pipefail
          cat > .pkgmeta <<'EOF'
          package-as: AltClickStatus

          ignore:
            - .git
            - .github
            - pkg
          EOF
          perl -pi -e 's/\r\n/\n/g' .pkgmeta
          echo ".pkgmeta (control chars visible):"
          sed -n '1,50p' .pkgmeta | cat -v

      - name: 'Upload to CurseForge (BigWigs Packager)'
        id: bw
        continue-on-error: true
        uses: BigWigsMods/packager@v2
        env:
          CF_API_KEY: ${{ secrets.CF_API_KEY }}
        with:
          args: -p 1333613

      # ---------- CurseForge fallback: direct uploader ----------
      - name: 'Fallback upload to CurseForge (if packager failed)'
        if: ${{ steps.bw.outcome == 'failure' }}
        uses: itsmeow/curseforge-upload@v3
        with:
          token: ${{ secrets.CF_API_KEY }}
          project_id: '1333613'
          game_endpoint: 'wow'
          file_path: ${{ env.ZIP_PATH }}
          release_type: 'release'
          game_versions: '${{ steps.inf.outputs.gamever }}'   # auto-resolved: e.g. 1.15.7
          display_name: 'Alt-Click Status ${{ steps.meta.outputs.tag }}'

  debug-packager:
    needs: build-and-release
    if: ${{ failure() }}
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout tag'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.build-and-release.outputs.tag }}

      - name: 'Show repo tree at the tag (first 200 paths)'
        run: |
          git ls-tree -r --name-only HEAD | sed -n '1,200p' || true

      - name: 'Reveal control chars in path names (sanity)'
        run: |
          python3 - << 'PY'
          import os
          for root, dirs, files in os.walk('.', topdown=True):
              for d in dirs:
                  print('DIR ', repr(os.path.join(root, d)))
              for f in files:
                  print('FILE', repr(os.path.join(root, f)))
          PY

      - name: 'Recreate packager staging and inspect'
        shell: bash
        run: |
          set -euxo pipefail
          rm -rf .release
          mkdir -p .release/AltClickStatus
          rsync -a --exclude ".git" --exclude ".github" --exclude "pkg" AltClickStatus/ .release/AltClickStatus/
          echo "Top-level of .release (with control chars):"
          (cd .release && ls -la | cat -v)
          echo "Inside .release/AltClickStatus (with control chars):"
          (cd .release/AltClickStatus && ls -la | cat -v)
          echo "TOC head (with control chars):"
          sed -n '1,30p' AltClickStatus/AltClickStatus.toc | cat -v

      - name: 'Zip like packager does (diagnostic)'
        shell: bash
        run: |
          set -euxo pipefail
          (cd .release && zip -X -r test.zip . -i AltClickStatus || true)
          echo "Zip exit code above should be 0 if folder name matched."
          ls -la .release || true
          ls -la .release/AltClickStatus || true
