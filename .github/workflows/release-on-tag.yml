name: release-on-tag
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Existing tag to (re)package, e.g. v0.3.0f'
        required: true
        default: 'v0.3.0f'

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: 'Derive tag & version'
        id: meta
        shell: bash
        run: |
          if [[ -n "${{ github.event.inputs.tag }}" ]]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG="${GITHUB_REF_NAME}"
          fi
          if [[ -z "$TAG" ]]; then
            echo "::error::No tag provided or detected."
            exit 1
          fi
          VERSION="${TAG#v}"
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "TAG=${TAG}" >> "$GITHUB_ENV"
          echo "VERSION=${VERSION}" >> "$GITHUB_ENV"

      - name: 'Checkout tag'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ steps.meta.outputs.tag }}

      - name: 'Verify tag exists'
        shell: bash
        run: |
          if ! git show-ref --tags --verify --quiet "refs/tags/${{ steps.meta.outputs.tag }}"; then
            echo "::error::Tag '${{ steps.meta.outputs.tag }}' does not exist."
            exit 1
          fi

      - name: 'Preflight: show repo tree (first 200 files)'
        run: |
          git ls-tree -r --name-only HEAD | sed -n '1,200p' || true

      - name: 'Preflight: locate TOC at tag'
        id: toc
        shell: bash
        run: |
          set -euo pipefail
          if [[ -f "AltClickStatus/AltClickStatus.toc" ]]; then
            echo "found=AltClickStatus/AltClickStatus.toc" >> "$GITHUB_OUTPUT"
          else
            echo "::error::Expected AltClickStatus/AltClickStatus.toc at the tag, but it was not found."
            echo "Tip: commit the top-level layout and create a NEW tag."
            exit 1
          fi
          echo "Detected TOC at AltClickStatus/AltClickStatus.toc"
     
      - name: 'Prepare ZIP package for GitHub Release'
        shell: bash
        run: |
          set -euo pipefail
          SRC_DIR="AltClickStatus"
          ADDON="AltClickStatus"
          mkdir -p "pkg/${ADDON}"
          rsync -a --delete --exclude ".git" --exclude ".github" --exclude "pkg" "${SRC_DIR}/" "pkg/${ADDON}/"
          if grep -qE '^##\s*Version:' "pkg/${ADDON}/${ADDON}.toc"; then
            sed -i -E "s/^(##\s*Version:)\s*.*/\1 ${{ steps.meta.outputs.version }}/" "pkg/${ADDON}/${ADDON}.toc"
          else
            echo "## Version: ${{ steps.meta.outputs.version }}" >> "pkg/${ADDON}/${ADDON}.toc"
          fi
          cd pkg
          ZIP="${ADDON}_${{ steps.meta.outputs.tag }}.zip"
          zip -r "$ZIP" "${ADDON}"
          echo "ZIP_PATH=${PWD}/${ZIP}" >> $GITHUB_ENV

      - name: 'Upload artifact (GitHub zip)'
        uses: actions/upload-artifact@v4
        with:
          name: AltClickStatus_${{ steps.meta.outputs.tag }}.zip
          path: ${{ env.ZIP_PATH }}

      - name: 'Create or update GitHub Release'
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.ZIP_PATH }}
          name: Alt-Click Status ${{ steps.meta.outputs.tag }}
          tag_name: ${{ steps.meta.outputs.tag }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Confirm .pkgmeta present at tag'
        shell: bash
        run: |
          if [[ ! -f ".pkgmeta" ]]; then
            echo "::error::.pkgmeta missing at tag '${{ steps.meta.outputs.tag }}'."
            echo "You must commit .pkgmeta and create a NEW tag (e.g., v0.3.0f)."
            exit 1
          fi
      - name: 'Derive addon name & source dir from TOC (at tag)'
        id: addonn
        shell: bash
        run: |
          set -euo pipefail
          # Prefer common WoW layouts first:
          CANDIDATES=(
            "AltClickStatus/AltClickStatus.toc"
            "Interface/AddOns/AltClickStatus/AltClickStatus.toc"
          )
          # Fallback: any *.toc (shallow search) â€“ first match wins
          while IFS= read -r p; do CANDIDATES+=("$p"); done < <(git ls-files | grep -E '\.toc$' || true)

          NAME=""
          SRC=""
          for p in "${CANDIDATES[@]}"; do
            if [[ -f "$p" ]]; then
              NAME="$(basename "$p" .toc)"
              SRC="$(dirname "$p")"
              echo "Using TOC: $p"
              break
            fi
          done
          if [[ -z "$NAME" || -z "$SRC" ]]; then
            echo "::error::No .toc found at tag '${{ steps.meta.outputs.tag }}'."
            exit 1
          fi
          echo "name=${NAME}" >> "$GITHUB_OUTPUT"
          echo "src=${SRC}" >> "$GITHUB_OUTPUT"

      - name: 'Generate .pkgmeta from detected TOC'
        shell: bash
        run: |
          set -euo pipefail
          cat > .pkgmeta <<EOF
          package-as: ${{ steps.addonn.outputs.name }}

          move-folders:
            ${{ steps.addonn.outputs.src }}: ${{ steps.addonn.outputs.name }}

          ignore:
            - .git
            - .github
            - pkg
          EOF
          echo "Generated .pkgmeta:"
          cat .pkgmeta

      - name: 'Upload to CurseForge (BigWigs Packager)'
        uses: BigWigsMods/packager@v2
        env:
          CF_API_KEY: ${{ secrets.CF_API_KEY }}
        with:
          args: -p 1333613