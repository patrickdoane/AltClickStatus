name: release-on-tag

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Existing tag to (re)package, e.g. v0.3.0b"
        required: true
        default: "v0.3.0b"

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Derive tag & version
        id: meta
        shell: bash
        run: |
          # If launched manually, use the provided input tag; else use the ref name from the tag push
          if [[ -n "${{ github.event.inputs.tag }}" ]]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG="${GITHUB_REF_NAME}"
          fi
          if [[ -z "$TAG" ]]; then
            echo "::error::No tag provided or detected."
            exit 1
          fi
          VERSION="${TAG#v}"
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "TAG=${TAG}" >> "$GITHUB_ENV"
          echo "VERSION=${VERSION}" >> "$GITHUB_ENV"

      - name: Checkout tag
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ steps.meta.outputs.tag }}

      - name: Verify tag exists
        shell: bash
        run: |
          if ! git show-ref --tags --verify --quiet "refs/tags/${{ steps.meta.outputs.tag }}"; then
            echo "::error::Tag '${{ steps.meta.outputs.tag }}' does not exist."
            exit 1
          fi

      - name: Locate addon source
        id: locate
        shell: bash
        run: |
          set -euo pipefail
          if [[ -d "AltClickStatus" ]]; then
            echo "src=AltClickStatus" >> $GITHUB_OUTPUT
          elif [[ -d "Interface/AddOns/AltClickStatus" ]]; then
            echo "src=Interface/AddOns/AltClickStatus" >> $GITHUB_OUTPUT
          else
            echo "::error::Could not find AltClickStatus folder. Ensure the repo contains 'AltClickStatus/' or 'Interface/AddOns/AltClickStatus/'."
            exit 1
          fi

      - name: Prepare ZIP package for GitHub Release
        shell: bash
        run: |
          set -euo pipefail
          SRC="${{ steps.locate.outputs.src }}"
          ADDON="AltClickStatus"
          mkdir -p pkg/"${ADDON}"
          rsync -a --delete --exclude ".git" --exclude ".github" --exclude "pkg" "${SRC}/" "pkg/${ADDON}/"
          if grep -qE '^##\s*Version:' "pkg/${ADDON}/${ADDON}.toc"; then
            sed -i -E "s/^(##\s*Version:)\s*.*/\1 ${{ steps.meta.outputs.version }}/" "pkg/${ADDON}/${ADDON}.toc"
          else
            echo "## Version: ${{ steps.meta.outputs.version }}" >> "pkg/${ADDON}/${ADDON}.toc"
          fi
          cd pkg
          ZIP="${ADDON}_${{ steps.meta.outputs.tag }}.zip"
          zip -r "$ZIP" "${ADDON}"
          echo "ZIP_PATH=${PWD}/${ZIP}" >> $GITHUB_ENV

      - name: Upload artifact (GitHub zip)
        uses: actions/upload-artifact@v4
        with:
          name: AltClickStatus_${{ steps.meta.outputs.tag }}.zip
          path: ${{ env.ZIP_PATH }}

      - name: Create or update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.ZIP_PATH }}
          name: Alt-Click Status ${{ steps.meta.outputs.tag }}
          tag_name: ${{ steps.meta.outputs.tag }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Ensure TOC has Version + X-Curse-Project-ID for packager
        shell: bash
        run: |
          set -euo pipefail
          SRC="${{ steps.locate.outputs.src }}"
          TOC="${SRC}/AltClickStatus.toc"
          if [[ ! -f "$TOC" ]]; then
            echo "::error::TOC not found at $TOC"
            exit 1
          fi
          if grep -qE '^##\s*Version:' "$TOC"; then
            sed -i -E "s/^(##\s*Version:)\s*.*/\1 ${{ steps.meta.outputs.version }}/" "$TOC"
          else
            echo "## Version: ${{ steps.meta.outputs.version }}" >> "$TOC"
          fi
          if grep -qE '^##\s*X-Curse-Project-ID:' "$TOC"; then
            sed -i -E "s/^(##\s*X-Curse-Project-ID:)\s*.*/\1 1333613/" "$TOC"
          else
            echo "## X-Curse-Project-ID: 1333613" >> "$TOC"
          fi

      - name: Upload to CurseForge (BigWigs Packager)
        uses: BigWigsMods/packager@v2
        env:
          CF_API_KEY: ${{ secrets.CF_API_KEY }}
        with:
          args: -p 1333613
